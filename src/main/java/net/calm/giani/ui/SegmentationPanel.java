/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.calm.giani.ui;

import ij.IJ;
import ij.ImagePlus;
import ij.plugin.LutLoader;
import ij.process.AutoThresholder;
import net.calm.giani.gianiparams.GIANIParamInfos;
import net.calm.giani.gianiparams.GianiDefaultParams;
import net.calm.iaclasslibrary.IO.BioFormats.BioFormatsImg;
import net.calm.iaclasslibrary.Process.Segmentation.MultiThreadedWatershed;
import net.calm.iaclasslibrary.UIClasses.LayerPanel;
import net.calm.iaclasslibrary.UIClasses.Updateable;

import javax.swing.*;
import java.io.File;
import java.net.URI;
import java.util.Properties;

/**
 * Panel for segmenting nuclei and cells in the {@link GIANIUI}
 *
 * @author Dave Barry
 * @since 1.0.0
 */
public class SegmentationPanel extends LayerPanel implements Updateable {

    private final String title;
    private final GIANIParamInfos info;

    /**
     * Default constructor
     */
    public SegmentationPanel() {
        this(null, null, null, null, null, null);
    }

    /**
     * Constructs a SegmentationPanel and associates the specified Properties, BioFormatsImg and process with it.
     *
     * @param props      contains the parameters governing how the process associated with this panel will run
     * @param img        the image that the process associated with this panel will run on
     * @param process    the process that this panel is seeking user-specified parameters for
     * @param propLabels the labels associated with the parameters that this panel will display
     * @param helpURI    link to an online help page describing how to use this panel
     * @param title      description of what this panel does
     */
    public SegmentationPanel(Properties props, BioFormatsImg img, MultiThreadedWatershed process, String[] propLabels, URI helpURI, String title) {
        super(props, img, process, propLabels, helpURI);
        this.title = title;
        this.info = new GIANIParamInfos();
        initComponents();
        setToolTips();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        previewButton = new javax.swing.JButton();
        thresholdLabel = new javax.swing.JLabel();
        thresholdComboBox = new javax.swing.JComboBox<>();
        volumeToggleButton = new javax.swing.JToggleButton();
        membraneToggleButton = new javax.swing.JToggleButton();
        distWeightingLabel = new javax.swing.JLabel();
        distWeightingTextField = new javax.swing.JTextField();
        helpButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        previewButton.setText("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(previewButton, gridBagConstraints);

        thresholdLabel.setText(propLabels[MultiThreadedWatershed.THRESHOLD_LABEL]);
        thresholdLabel.setLabelFor(thresholdComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(thresholdLabel, gridBagConstraints);

        thresholdComboBox.setModel(new DefaultComboBoxModel(AutoThresholder.getMethods()));
        thresholdComboBox.setSelectedItem("Default");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(thresholdComboBox, gridBagConstraints);

        volumeToggleButton.setText(propLabels[MultiThreadedWatershed.VOL_MARKER_LABEL]);
        volumeToggleButton.setSelected(Boolean.parseBoolean(props.getProperty(propLabels[2])));
        volumeToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volumeToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(volumeToggleButton, gridBagConstraints);

        membraneToggleButton.setText(propLabels[MultiThreadedWatershed.MEMB_MARKER_LABEL]);
        membraneToggleButton.setSelected(!Boolean.parseBoolean(props.getProperty(propLabels[2])));
        membraneToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                membraneToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(membraneToggleButton, gridBagConstraints);

        distWeightingLabel.setText(propLabels[MultiThreadedWatershed.LAMBDA_LABEL]);
        distWeightingLabel.setLabelFor(distWeightingTextField);
        distWeightingLabel.setEnabled(!Boolean.parseBoolean(props.getProperty(propLabels[2])));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(distWeightingLabel, gridBagConstraints);

        distWeightingTextField.setText(props.getProperty(propLabels[4]));
        distWeightingTextField.setEnabled(!Boolean.parseBoolean(props.getProperty(propLabels[2])));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(distWeightingTextField, gridBagConstraints);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(helpButton, gridBagConstraints);

        titleLabel.setFont(GianiDefaultParams.TITLE_FONT);
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText(title);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(titleLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    protected void setToolTips() {
        thresholdComboBox.setToolTipText(info.getProperty(propLabels[MultiThreadedWatershed.THRESHOLD_LABEL]));
        volumeToggleButton.setToolTipText(info.getProperty(propLabels[MultiThreadedWatershed.VOL_MARKER_LABEL]));
        membraneToggleButton.setToolTipText(info.getProperty(propLabels[MultiThreadedWatershed.MEMB_MARKER_LABEL]));
        distWeightingTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedWatershed.LAMBDA_LABEL]));
        previewButton.setToolTipText(info.getProperty(GianiDefaultParams.PREVIEW));
        helpButton.setToolTipText(info.getProperty(GianiDefaultParams.HELP));
    }

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        restartProcess();
        setVariables();
        process.start();
        try {
            process.join();
        } catch (InterruptedException e) {
            return;
        }
        ImagePlus imp = process.getOutput();
        String lutPath = String.format("%s%s%s", IJ.getDirectory("luts"), File.separator, "glasbey_on_dark.lut");
        if (IJ.getInstance() == null) {
            lutPath = "C:\\Users\\barryd\\FIJI\\fiji-nojre\\Fiji.app\\luts\\glasbey_on_dark.lut";
        }
        imp.setLut(LutLoader.openLut(lutPath));
        imp.resetDisplayRange();
        imp.show();
    }//GEN-LAST:event_previewButtonActionPerformed

    public void setupProcess() {
        process.setup(img, props, propLabels);
    }

    private void volumeToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volumeToggleButtonActionPerformed
        membraneToggleButton.setSelected(!volumeToggleButton.isSelected());
        membraneToggleButtonActionPerformed(evt);
    }//GEN-LAST:event_volumeToggleButtonActionPerformed

    private void membraneToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_membraneToggleButtonActionPerformed
        volumeToggleButton.setSelected(!membraneToggleButton.isSelected());
        updateDistanceWeighting();
    }//GEN-LAST:event_membraneToggleButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        openHelpPage(GianiDefaultParams.HELP_ERROR_MESSAGE);
    }//GEN-LAST:event_helpButtonActionPerformed

    void updateDistanceWeighting() {
        distWeightingLabel.setEnabled(membraneToggleButton.isSelected());
        distWeightingTextField.setEnabled(membraneToggleButton.isSelected());
    }

    public void update() {
        volumeToggleButtonActionPerformed(null);
        if (Boolean.parseBoolean(props.getProperty(GianiDefaultParams.NUC_MAXIMA_DETECT_STARDIST))
                && this.title.matches(GianiDefaultParams.NUC_SEG_TITLE)) {
            this.setEnabled(false);
        } else this.setEnabled(true);
        setComponentsEnabled();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel distWeightingLabel;
    private javax.swing.JTextField distWeightingTextField;
    private javax.swing.JButton helpButton;
    private javax.swing.JToggleButton membraneToggleButton;
    private javax.swing.JButton previewButton;
    private javax.swing.JComboBox<String> thresholdComboBox;
    private javax.swing.JLabel thresholdLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JToggleButton volumeToggleButton;
    // End of variables declaration//GEN-END:variables
}
