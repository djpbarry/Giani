/*
 * Copyright (C) 2018 David Barry <david.barry at crick dot ac dot uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.calm.giani.ui;

import ij.ImagePlus;
import ij.gui.OvalRoi;
import ij.gui.Overlay;
import ij.gui.Roi;
import ij.process.AutoThresholder;
import net.calm.giani.gianiparams.GIANIParamInfos;
import net.calm.giani.gianiparams.GianiDefaultParams;
import net.calm.iaclasslibrary.Extrema.MultiThreadedMaximaFinder;
import net.calm.iaclasslibrary.IO.BioFormats.BioFormatsImg;
import net.calm.iaclasslibrary.UIClasses.LayerPanel;
import net.calm.iaclasslibrary.UIClasses.Updateable;
import net.calm.iaclasslibrary.UtilClasses.GenUtils;
import net.calm.iaclasslibrary.UtilClasses.Utilities;
import ome.units.quantity.Length;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import java.util.Properties;

/**
 * Blob detection (centroid estimation) panel in the {@link GIANIUI}
 *
 * @author Dave Barry
 * @since 1.0.0
 */
public class MaximaFinderPanel extends LayerPanel implements Updateable {

    private ArrayList<String> channelLabels;
    boolean allowChannelSelect;
    int defaultChannel;
    private final String title;
    private final GIANIParamInfos info;

    /**
     * Default constructor
     */
    public MaximaFinderPanel() {
        this(null, null, null, null, true, -1, null, null);
    }

    /**
     * Constructs a MaximaFinderPanel1 and associates the specified Properties,
     * BioFormatsImg and process with it.
     *
     * @param props contains the parameters governing how the process associated
     * with this panel will run
     * @param img the image that the process associated with this panel will run
     * on
     * @param process the process that this panel is seeking user-specified
     * parameters for
     * @param propLabels the labels associated with the parameters that this
     * panel will display
     * @param allowChannelSelect set to true to include a dropdown menu allowing
     * channel selection
     * @param defaultChannel if allowChannelSelect is false, specify the
     * specific channel the process associated with this panel will run on
     * @param helpURI link to an online help page describing how to use this
     * panel
     * @param title description of what this panel does
     */
    public MaximaFinderPanel(Properties props, BioFormatsImg img, MultiThreadedMaximaFinder process, String[] propLabels, boolean allowChannelSelect, int defaultChannel, URI helpURI, String title) {
        super(props, img, process, propLabels, helpURI);
        this.allowChannelSelect = allowChannelSelect;
        this.defaultChannel = defaultChannel;
        this.title = title;
        this.info = new GIANIParamInfos();
        initComponents();
        setToolTips();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        previewButton = new javax.swing.JButton();
        channelSelectLabel = new javax.swing.JLabel();
        channelSelectComboBox = new javax.swing.JComboBox<>();
        helpButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        methodComboBox = new javax.swing.JComboBox<>();
        methodLabel = new javax.swing.JLabel();
        simpleDetectionPanel = new javax.swing.JPanel();
        blobRadLabel = new javax.swing.JLabel();
        blobRadTextField = new javax.swing.JTextField();
        unitsLabel1 = new javax.swing.JLabel();
        noiseTolTextField = new javax.swing.JTextField();
        noiseTolLabel = new javax.swing.JLabel();
        advancedDetectionPanel = new javax.swing.JPanel();
        hessianMinSizeLabel = new javax.swing.JLabel();
        hessianThreshLabel = new javax.swing.JLabel();
        hessianThreshTextField = new javax.swing.JTextField();
        hessianMinSizeTextField = new javax.swing.JTextField();
        unitsLabel2 = new javax.swing.JLabel();
        stardistPanel = new javax.swing.JPanel();
        starDistProbLabel = new javax.swing.JLabel();
        starDistOverlapLabel = new javax.swing.JLabel();
        starDistProbTextField = new javax.swing.JTextField();
        starDistOverlapTextField = new javax.swing.JTextField();
        starDistDirLabel = new javax.swing.JLabel();
        starDistModelLabel = new javax.swing.JLabel();
        starDistDirTextField = new javax.swing.JTextField();
        starDistModelTextField = new javax.swing.JTextField();
        starDistDirButton = new javax.swing.JButton();
        starDistModelButton = new javax.swing.JButton();
        starDistTileXYLabel = new javax.swing.JLabel();
        starDistTileZLabel = new javax.swing.JLabel();
        starDistTileXYTextField = new javax.swing.JTextField();
        starDistTileZTextField = new javax.swing.JTextField();
        ilastikPanel = new javax.swing.JPanel();
        ilastikFileLabel = new javax.swing.JLabel();
        ilastikChannelLabel = new javax.swing.JLabel();
        ilastikFileTextField = new javax.swing.JTextField();
        ilastikChannelTextField = new javax.swing.JTextField();
        ilastikFileButton = new javax.swing.JButton();
        ilastikDirLabel = new javax.swing.JLabel();
        ilastikDirTextField = new javax.swing.JTextField();
        ilastikDirButton = new javax.swing.JButton();
        ilastikThreshLabel = new javax.swing.JLabel();
        ilastikThreshTextField = new javax.swing.JTextField();
        ilastikSmoothingLabel = new javax.swing.JLabel();
        ilastikSmoothingTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        thresholdPanel = new javax.swing.JPanel();
        thresholdLabel = new javax.swing.JLabel();
        thresholdComboBox = new javax.swing.JComboBox<>();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        previewButton.setText("Preview");
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(previewButton, gridBagConstraints);

        channelSelectLabel.setText(propLabels[MultiThreadedMaximaFinder.CHANNEL_SELECT]);
        channelSelectLabel.setLabelFor(channelSelectComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(channelSelectLabel, gridBagConstraints);

        channelSelectComboBox.setModel(new DefaultComboBoxModel(new String[]{}));
        channelSelectComboBox.setVisible(allowChannelSelect);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(channelSelectComboBox, gridBagConstraints);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(helpButton, gridBagConstraints);

        titleLabel.setFont(GianiDefaultParams.TITLE_FONT);
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText(title);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(titleLabel, gridBagConstraints);

        methodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {GianiDefaultParams.NUC_MAXIMA_DETECT_BLOBS, GianiDefaultParams.NUC_MAXIMA_DETECT_HESSIAN, GianiDefaultParams.NUC_MAXIMA_DETECT_STARDIST, GianiDefaultParams.NUC_MAXIMA_DETECT_ILASTIK, GianiDefaultParams.NUC_MAXIMA_DETECT_THRESHOLD}));
        methodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                methodComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(methodComboBox, gridBagConstraints);

        methodLabel.setText(propLabels[MultiThreadedMaximaFinder.METHOD]);
        methodLabel.setLabelFor(methodComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(methodLabel, gridBagConstraints);

        simpleDetectionPanel.setMinimumSize(new java.awt.Dimension(191, 180));
        simpleDetectionPanel.setLayout(new java.awt.GridBagLayout());

        blobRadLabel.setText(propLabels[MultiThreadedMaximaFinder.BLOB_SIZE]);
        blobRadLabel.setLabelFor(blobRadTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleDetectionPanel.add(blobRadLabel, gridBagConstraints);

        blobRadTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_SIZE]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleDetectionPanel.add(blobRadTextField, gridBagConstraints);

        unitsLabel1.setText(unitText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleDetectionPanel.add(unitsLabel1, gridBagConstraints);

        noiseTolTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_THRESH]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleDetectionPanel.add(noiseTolTextField, gridBagConstraints);

        noiseTolLabel.setText(propLabels[MultiThreadedMaximaFinder.BLOB_THRESH]);
        noiseTolLabel.setLabelFor(noiseTolTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        simpleDetectionPanel.add(noiseTolLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(simpleDetectionPanel, gridBagConstraints);

        advancedDetectionPanel.setMinimumSize(new java.awt.Dimension(191, 180));
        advancedDetectionPanel.setLayout(new java.awt.GridBagLayout());

        hessianMinSizeLabel.setText(propLabels[MultiThreadedMaximaFinder.HESSIAN_START_SCALE]);
        hessianMinSizeLabel.setLabelFor(hessianMinSizeTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        advancedDetectionPanel.add(hessianMinSizeLabel, gridBagConstraints);

        hessianThreshLabel.setText(propLabels[MultiThreadedMaximaFinder.HESSIAN_THRESH]);
        hessianThreshLabel.setLabelFor(hessianThreshTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        advancedDetectionPanel.add(hessianThreshLabel, gridBagConstraints);

        hessianThreshTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_THRESH]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        advancedDetectionPanel.add(hessianThreshTextField, gridBagConstraints);

        hessianMinSizeTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_START_SCALE]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        advancedDetectionPanel.add(hessianMinSizeTextField, gridBagConstraints);

        unitsLabel2.setText(unitText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        advancedDetectionPanel.add(unitsLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(advancedDetectionPanel, gridBagConstraints);

        stardistPanel.setMinimumSize(new java.awt.Dimension(136, 180));
        stardistPanel.setLayout(new java.awt.GridBagLayout());

        starDistProbLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_OVERLAP]);
        starDistProbLabel.setLabelFor(starDistProbTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistProbLabel, gridBagConstraints);

        starDistOverlapLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_PROB]);
        starDistOverlapLabel.setLabelFor(starDistOverlapTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistOverlapLabel, gridBagConstraints);

        starDistProbTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_PROB]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistProbTextField, gridBagConstraints);

        starDistOverlapTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_OVERLAP]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistOverlapTextField, gridBagConstraints);

        starDistDirLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_DIR]);
        starDistDirLabel.setLabelFor(starDistDirTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistDirLabel, gridBagConstraints);

        starDistModelLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_MODEL]);
        starDistModelLabel.setLabelFor(starDistModelTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistModelLabel, gridBagConstraints);

        starDistDirTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_DIR]));
        starDistDirTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                starDistDirTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistDirTextField, gridBagConstraints);

        starDistModelTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_MODEL]));
        starDistModelTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                starDistModelTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistModelTextField, gridBagConstraints);

        starDistDirButton.setText("Specify Location");
        starDistDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starDistDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistDirButton, gridBagConstraints);

        starDistModelButton.setText("Specify Location");
        starDistModelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starDistModelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistModelButton, gridBagConstraints);

        starDistTileXYLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_TILE_XY]);
        starDistTileXYLabel.setLabelFor(starDistTileXYTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistTileXYLabel, gridBagConstraints);

        starDistTileZLabel.setText(propLabels[MultiThreadedMaximaFinder.STARDIST_TILE_Z]);
        starDistTileZLabel.setLabelFor(starDistTileZTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistTileZLabel, gridBagConstraints);

        starDistTileXYTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_TILE_XY]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistTileXYTextField, gridBagConstraints);

        starDistTileZTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_TILE_Z]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        stardistPanel.add(starDistTileZTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(stardistPanel, gridBagConstraints);

        ilastikPanel.setLayout(new java.awt.GridBagLayout());

        ilastikFileLabel.setText(propLabels[MultiThreadedMaximaFinder.ILASTIK_FILE]);
        ilastikFileLabel.setLabelFor(ilastikFileTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikFileLabel, gridBagConstraints);

        ilastikChannelLabel.setText(propLabels[MultiThreadedMaximaFinder.ILASTIK_CHANNEL]);
        ilastikChannelLabel.setLabelFor(ilastikChannelTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikChannelLabel, gridBagConstraints);

        ilastikFileTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_FILE]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikFileTextField, gridBagConstraints);

        ilastikChannelTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_CHANNEL]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikChannelTextField, gridBagConstraints);

        ilastikFileButton.setText("Specify Location");
        ilastikFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ilastikFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikFileButton, gridBagConstraints);

        ilastikDirLabel.setText(propLabels[MultiThreadedMaximaFinder.ILASTIK_DIR]);
        ilastikDirLabel.setLabelFor(ilastikDirTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikDirLabel, gridBagConstraints);

        ilastikDirTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_DIR]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikDirTextField, gridBagConstraints);

        ilastikDirButton.setText("Specify Location");
        ilastikDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ilastikDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikDirButton, gridBagConstraints);

        ilastikThreshLabel.setText(propLabels[MultiThreadedMaximaFinder.ILASTIK_THRESH]);
        ilastikThreshLabel.setLabelFor(ilastikThreshTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikThreshLabel, gridBagConstraints);

        ilastikThreshTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_THRESH]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikThreshTextField, gridBagConstraints);

        ilastikSmoothingLabel.setText(propLabels[MultiThreadedMaximaFinder.ILASTIK_SMOOTHING]);
        ilastikSmoothingLabel.setLabelFor(ilastikSmoothingTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikSmoothingLabel, gridBagConstraints);

        ilastikSmoothingTextField.setText(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_SMOOTHING]));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(ilastikSmoothingTextField, gridBagConstraints);

        jLabel1.setText(unitText);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        ilastikPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(ilastikPanel, gridBagConstraints);

        thresholdPanel.setLayout(new java.awt.GridBagLayout());

        thresholdLabel.setText(propLabels[MultiThreadedMaximaFinder.THRESH_METHOD]);
        thresholdLabel.setLabelFor(thresholdComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        thresholdPanel.add(thresholdLabel, gridBagConstraints);

        thresholdComboBox.setModel(new DefaultComboBoxModel(AutoThresholder.getMethods()));
        thresholdComboBox.setSelectedItem("Default");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        thresholdPanel.add(thresholdComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        add(thresholdPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    protected void setToolTips() {
        channelSelectComboBox.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.CHANNEL_SELECT]));
//        simpleDetectToggleButton.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_DETECT]));
//        advancedDetectToggleButton.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_DETECT]));
        methodComboBox.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.METHOD]));
        blobRadTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_SIZE]));
        noiseTolTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_THRESH]));
        hessianMinSizeTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_START_SCALE]));
//        hessianMaxSizeTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_STOP_SCALE]));
//        hessianStepSizeTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_SCALE_STEP]));
        hessianThreshTextField.setToolTipText(info.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_THRESH]));
        previewButton.setToolTipText(info.getProperty(GianiDefaultParams.PREVIEW));
        helpButton.setToolTipText(info.getProperty(GianiDefaultParams.HELP));
    }

    public boolean setVariables() {
        setProperties(props, this);
        String method = (String) methodComboBox.getSelectedItem();
        props.setProperty(propLabels[MultiThreadedMaximaFinder.BLOB_DETECT], "false");
        props.setProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_DETECT], "false");
        props.setProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_DETECT], "false");
        props.setProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_DETECT], "false");
        if (method.toLowerCase().contains("ilastik")) {
            props.setProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_DETECT], "true");
        } else if (method.toLowerCase().contains("stardist")) {
            props.setProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_DETECT], "true");
        } else if (method.toLowerCase().contains("advanced")) {
            props.setProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_DETECT], "true");
        } else {
            props.setProperty(propLabels[MultiThreadedMaximaFinder.BLOB_DETECT], "true");
        }

        setupProcess();
        return true;
    }

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        restartProcess();
        setVariables();
        process.start();
        try {
            process.join();
        } catch (InterruptedException e) {
            return;
        }
        if (Boolean.parseBoolean(props.getProperty(propLabels[MultiThreadedMaximaFinder.STARDIST_DETECT]))) {
            showOutput(process.getOutput(), process.getOutput().getTitle());
        } else {
            showOutput(((MultiThreadedMaximaFinder) process).getMaxima(), process.getOutput().getTitle(),
                    ((MultiThreadedMaximaFinder) process).getDetectedObjectsOutline());
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        openHelpPage(GianiDefaultParams.HELP_ERROR_MESSAGE);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void methodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_methodComboBoxActionPerformed
        String method = (String) methodComboBox.getSelectedItem();
        simpleDetectionPanel.setVisible(false);
        advancedDetectionPanel.setVisible(false);
        stardistPanel.setVisible(false);
        ilastikPanel.setVisible(false);
        thresholdPanel.setVisible(false);
        switch (method) {
            case GianiDefaultParams.NUC_MAXIMA_DETECT_BLOBS:
                simpleDetectionPanel.setVisible(true);
                break;
            case GianiDefaultParams.NUC_MAXIMA_DETECT_HESSIAN:
                advancedDetectionPanel.setVisible(true);
                break;
            case GianiDefaultParams.NUC_MAXIMA_DETECT_ILASTIK:
                ilastikPanel.setVisible(true);
                break;
            case GianiDefaultParams.NUC_MAXIMA_DETECT_THRESHOLD:
                thresholdPanel.setVisible(true);
                break;
            default:
                stardistPanel.setVisible(true);
        }
    }//GEN-LAST:event_methodComboBoxActionPerformed

    private void starDistDirTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_starDistDirTextFieldKeyPressed
        if (evt.getKeyCode() != KeyEvent.VK_ENTER) {
            return;
        }
        directoryUpdated(starDistDirTextField);
    }//GEN-LAST:event_starDistDirTextFieldKeyPressed

    private void starDistModelTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_starDistModelTextFieldKeyPressed
        if (evt.getKeyCode() != KeyEvent.VK_ENTER) {
            return;
        }
        directoryUpdated(starDistModelTextField);
    }//GEN-LAST:event_starDistModelTextFieldKeyPressed

    private void starDistDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starDistDirButtonActionPerformed
        try {
            starDistDirTextField.setText(Utilities.getFolder(
                    new File(props.getProperty(GianiDefaultParams.STARDIST_ENV_DIRECTORY)),
                    "Select folder containing StarDist environment", true).getAbsolutePath());
        } catch (Exception e) {
            GenUtils.logError(e, "There was a problem with directory selection.");
        }
        directoryUpdated(starDistDirTextField);
    }//GEN-LAST:event_starDistDirButtonActionPerformed

    private void starDistModelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starDistModelButtonActionPerformed
        try {
            starDistModelTextField.setText(Utilities.getFolder(
                    new File(props.getProperty(GianiDefaultParams.STARDIST_MODEL_DIRECTORY)),
                    "Select folder containing StarDist model", true).getAbsolutePath());
        } catch (Exception e) {
            GenUtils.logError(e, "There was a problem with directory selection.");
        }
        directoryUpdated(starDistDirTextField);
    }//GEN-LAST:event_starDistModelButtonActionPerformed

    private void ilastikFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ilastikFileButtonActionPerformed
        try {
            ilastikFileTextField.setText(Utilities.getFile(
                    new File(props.getProperty(GianiDefaultParams.ILASTIK_PROJECT_FILE)),
                    "Select ilastik project file", true).getAbsolutePath());
        } catch (Exception e) {
            GenUtils.logError(e, "There was a problem with file selection.");
        }
        fileUpdated(ilastikFileTextField);
    }//GEN-LAST:event_ilastikFileButtonActionPerformed

    private void ilastikDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ilastikDirButtonActionPerformed
        try {
            ilastikDirTextField.setText(Utilities.getFolder(
                    new File(props.getProperty(GianiDefaultParams.ILASTIK_DIRECTORY)),
                    "Select folder containing ilastik installation", true).getAbsolutePath());
        } catch (Exception e) {
            GenUtils.logError(e, "There was a problem with directory selection.");
        }
        directoryUpdated(ilastikDirTextField);
    }//GEN-LAST:event_ilastikDirButtonActionPerformed

    public void setupProcess() {

        process.setup(img, props, propLabels);
    }

    private void showOutput(ImagePlus imp, String title) {
        imp.setTitle(title);
        imp.show();
    }

    private void showOutput(ArrayList<int[]> maxima, String title, Roi[] binaryOutline) {
        ImagePlus imp = img.getLoadedImage();
        Overlay o = new Overlay();
        Length zLength = img.getZSpatialRes(Integer.parseInt(props.getProperty(GianiDefaultParams.SERIES_SELECT_LABEL)));
        double zSpatRes = 1.0;
        if (zLength != null) {
            zSpatRes = zLength.value().doubleValue();
        }
        Length xyLength = img.getXYSpatialRes(Integer.parseInt(props.getProperty(GianiDefaultParams.SERIES_SELECT_LABEL)));
        double xySpatRes = 1.0;
        if (xyLength != null) {
            xySpatRes = xyLength.value().doubleValue();
        }
        double maxXYRadiusMic = Double.parseDouble(props.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_SIZE]));
        double maxZRadiusMic = Double.parseDouble(props.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_SIZE]));
        if (!Boolean.parseBoolean(props.getProperty(propLabels[MultiThreadedMaximaFinder.BLOB_DETECT]))) {
            maxXYRadiusMic = Double.parseDouble(props.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_START_SCALE]));
            maxZRadiusMic = Double.parseDouble(props.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_START_SCALE]));
        }
        double maxZRadiusMic2 = Math.pow(maxZRadiusMic, 2.0);
        double maxXYRadiusMic2 = Math.pow(maxXYRadiusMic, 2.0);
        int zRadiusPix = (int) Math.ceil(maxZRadiusMic / zSpatRes);
        for (int[] pix : maxima) {
            int z0 = pix[2] + 1;
            for (int z = z0 - zRadiusPix < 1 ? 1 : z0 - zRadiusPix; z <= z0 + zRadiusPix && z <= imp.getNSlices(); z++) {
                double z2 = Math.pow((z - z0) * zSpatRes, 2.0);
                double cr = Math.sqrt((1.0 - z2 / maxZRadiusMic2) * maxXYRadiusMic2);
                int currentRadius = (int) Math.round(cr / xySpatRes);
                if (currentRadius < 1) {
                    currentRadius = 1;
                }
                OvalRoi roi = new OvalRoi(pix[0] - currentRadius, pix[1] - currentRadius, 2 * currentRadius + 1, 2 * currentRadius + 1);
                roi.setPosition(z);
                o.add(roi);
            }
        }
        if (Boolean.parseBoolean(props.getProperty(propLabels[MultiThreadedMaximaFinder.HESSIAN_DETECT]))
                || Boolean.parseBoolean(props.getProperty(propLabels[MultiThreadedMaximaFinder.ILASTIK_DETECT]))) {
            for (int i = 0; i < imp.getNSlices(); i++) {
                if (binaryOutline[i] == null) {
                    continue;
                }
                binaryOutline[i].setStrokeColor(Color.red);
                binaryOutline[i].setPosition(i + 1);
                o.add(binaryOutline[i]);
            }
        }
        imp.setTitle(title);
        imp.show();
        imp.setOverlay(o);
    }

    public void update() {
        if (img.getId() == null) {
            return;
        }
        int channels = img.getSizeC(img.getCurrentSeries());
        channelLabels = new ArrayList();
        for (int c = 0; c < channels; c++) {
            channelLabels.add(String.valueOf(c));
        }
        channelSelectComboBox.setModel(new DefaultComboBoxModel(channelLabels.toArray()));
        channelSelectComboBox.setSelectedItem(props.get(propLabels[MultiThreadedMaximaFinder.CHANNEL_SELECT]));
        channelSelectComboBox.setVisible(allowChannelSelect);
        if (defaultChannel > -1) {
            channelSelectComboBox.setSelectedIndex(defaultChannel);
        }
        //simpleDetectToggleButtonActionPerformed(null);
        methodComboBoxActionPerformed(null);
        unitsLabel1.setText(props.getProperty(GianiDefaultParams.UNITS));
        unitsLabel2.setText(props.getProperty(GianiDefaultParams.UNITS));
//        unitsLabel3.setText(props.getProperty(GianiDefaultParams.UNITS));
//        unitsLabel4.setText(props.getProperty(GianiDefaultParams.UNITS));
//        unitsLabel5.setText(props.getProperty(GianiDefaultParams.UNITS));
    }

    private void directoryUpdated(JTextField textField) {
        File inputDirectory = new File(textField.getText());
        if (inputDirectory.exists() && inputDirectory.isDirectory()) {
            textField.setForeground(Color.black);
        } else {
            textField.setForeground(Color.red);

        }
    }

    private void fileUpdated(JTextField textField) {
        File inputFile = new File(textField.getText());
        if (inputFile.exists() && inputFile.isFile()) {
            textField.setForeground(Color.black);
        } else {
            textField.setForeground(Color.red);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedDetectionPanel;
    private javax.swing.JLabel blobRadLabel;
    private javax.swing.JTextField blobRadTextField;
    private javax.swing.JComboBox<String> channelSelectComboBox;
    private javax.swing.JLabel channelSelectLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel hessianMinSizeLabel;
    private javax.swing.JTextField hessianMinSizeTextField;
    private javax.swing.JLabel hessianThreshLabel;
    private javax.swing.JTextField hessianThreshTextField;
    private javax.swing.JLabel ilastikChannelLabel;
    private javax.swing.JTextField ilastikChannelTextField;
    private javax.swing.JButton ilastikDirButton;
    private javax.swing.JLabel ilastikDirLabel;
    private javax.swing.JTextField ilastikDirTextField;
    private javax.swing.JButton ilastikFileButton;
    private javax.swing.JLabel ilastikFileLabel;
    private javax.swing.JTextField ilastikFileTextField;
    private javax.swing.JPanel ilastikPanel;
    private javax.swing.JLabel ilastikSmoothingLabel;
    private javax.swing.JTextField ilastikSmoothingTextField;
    private javax.swing.JLabel ilastikThreshLabel;
    private javax.swing.JTextField ilastikThreshTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> methodComboBox;
    private javax.swing.JLabel methodLabel;
    private javax.swing.JLabel noiseTolLabel;
    private javax.swing.JTextField noiseTolTextField;
    protected javax.swing.JButton previewButton;
    private javax.swing.JPanel simpleDetectionPanel;
    private javax.swing.JButton starDistDirButton;
    private javax.swing.JLabel starDistDirLabel;
    private javax.swing.JTextField starDistDirTextField;
    private javax.swing.JButton starDistModelButton;
    private javax.swing.JLabel starDistModelLabel;
    private javax.swing.JTextField starDistModelTextField;
    private javax.swing.JLabel starDistOverlapLabel;
    private javax.swing.JTextField starDistOverlapTextField;
    private javax.swing.JLabel starDistProbLabel;
    private javax.swing.JTextField starDistProbTextField;
    private javax.swing.JLabel starDistTileXYLabel;
    private javax.swing.JTextField starDistTileXYTextField;
    private javax.swing.JLabel starDistTileZLabel;
    private javax.swing.JTextField starDistTileZTextField;
    private javax.swing.JPanel stardistPanel;
    private javax.swing.JComboBox<String> thresholdComboBox;
    private javax.swing.JLabel thresholdLabel;
    private javax.swing.JPanel thresholdPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel unitsLabel1;
    private javax.swing.JLabel unitsLabel2;
    // End of variables declaration//GEN-END:variables
}
