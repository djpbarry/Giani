/*
 * Copyright (C) 2019 David Barry <david.barry at crick dot ac dot uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.calm.giani.ui;

import net.calm.iaclasslibrary.IO.BioFormats.LocationAgnosticBioFormatsImg;
import net.calm.iaclasslibrary.Process.Colocalise.MultiThreadedColocalise;
import net.calm.iaclasslibrary.UIClasses.LayerPanel;

import java.util.Properties;

/**
 * Colocalisation panel in the {@link GIANIUI}
 *
 * @author Dave Barry
 * @since 1.0.0
 */
public class LocalisationPanel extends LayerPanel {

    /**
     * Default constructor
     */
    public LocalisationPanel() {
        this(null, null, null, null);
    }

    /**
     * Constructs a LocalisationPanel and associates the specified Properties, BioFormatsImg and process with it.
     *
     * @param props contains the parameters governing how the process associated with this panel will run
     * @param img the image that the process associated with this panel will run on
     * @param process the process that this panel is seeking user-specified parameters for
     * @param propLabels the labels associated with the parameters that this panel will display
     */
    public LocalisationPanel(Properties props, LocationAgnosticBioFormatsImg img, MultiThreadedColocalise process, String[] propLabels) {
        super(props, img, process, propLabels, null);
        initComponents();
    }

    public void setupProcess() {
        process.setup(img, props, propLabels);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("All parameters set - click Run!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    protected void setToolTips() {}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
