/*
 * Copyright (C) 2018 David Barry <david.barry at crick dot ac dot uk>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.calm.giani.ui;

import java.io.File;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import ij.IJ;
import ij.ImagePlus;
import net.calm.giani.gianiparams.GianiDefaultParams;
import net.calm.iaclasslibrary.IO.BioFormats.BioFormatsFileLister;
import net.calm.iaclasslibrary.IO.BioFormats.BioFormatsImg;
import net.calm.iaclasslibrary.UIClasses.LayerPanel;
import net.calm.iaclasslibrary.UtilClasses.GenUtils;
import net.calm.iaclasslibrary.UtilClasses.Utilities;

import java.awt.Color;
import java.util.Properties;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.net.URI;

/**
 *
 * @author David Barry <david.barry at crick dot ac dot uk>
 */
public class SelectInputPanel extends LayerPanel {

    private static File inputDirectory;
//    private BioFormatsImg img;

    /**
     * Creates new form SelectInputPanel
     */
    public SelectInputPanel() {
        this(null, null, null);
    }

    public SelectInputPanel(Properties props, BioFormatsImg img, String[] propLabels) {
        this(props, img, propLabels, null);
    }

    public SelectInputPanel(Properties props, BioFormatsImg img, String[] propLabels, URI helpURI) {
        super(props, img, null, propLabels, helpURI);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        inputDirTextField = new javax.swing.JTextField();
        chooseInputDirButton = new javax.swing.JButton();
        inputDirLabel = new javax.swing.JLabel();
        fileNameComboLabel = new javax.swing.JLabel();
        fileNameComboBox = new javax.swing.JComboBox<>();
        seriesSelectLabel = new javax.swing.JLabel();
        channelSelectLabel = new javax.swing.JLabel();
        seriesComboBox = new javax.swing.JComboBox<>();
        channelComboBox = new javax.swing.JComboBox<>();
        previewButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        inputDirTextField.setText(props.getProperty(propLabels[0]));
        inputDirTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputDirTextFieldKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(inputDirTextField, gridBagConstraints);

        chooseInputDirButton.setText("Select Input");
        chooseInputDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseInputDirButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(chooseInputDirButton, gridBagConstraints);

        inputDirLabel.setText(propLabels[0]);
        inputDirLabel.setLabelFor(inputDirTextField);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(inputDirLabel, gridBagConstraints);

        fileNameComboLabel.setText(propLabels[1]);
        fileNameComboLabel.setEnabled(false);
        fileNameComboLabel.setLabelFor(fileNameComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(fileNameComboLabel, gridBagConstraints);

        fileNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fileNameComboBox.setEnabled(false);
        fileNameComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                fileNameComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(fileNameComboBox, gridBagConstraints);

        seriesSelectLabel.setText(propLabels[2]);
        seriesSelectLabel.setEnabled(false);
        seriesSelectLabel.setLabelFor(seriesComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(seriesSelectLabel, gridBagConstraints);

        channelSelectLabel.setText(propLabels[3]);
        channelSelectLabel.setEnabled(false);
        channelSelectLabel.setLabelFor(channelComboBox);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(channelSelectLabel, gridBagConstraints);

        seriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        seriesComboBox.setEnabled(false);
        seriesComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                seriesComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(seriesComboBox, gridBagConstraints);

        channelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        channelComboBox.setEnabled(false);
        channelComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                channelComboBoxPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(channelComboBox, gridBagConstraints);

        previewButton.setText("Preview");
        previewButton.setEnabled(false);
        previewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(previewButton, gridBagConstraints);

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(helpButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void chooseInputDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseInputDirButtonActionPerformed
        try {
            inputDirTextField.setText(Utilities.getFolder(inputDirectory, "Select input directory...", true).getAbsolutePath());
        } catch (Exception e) {
            GenUtils.logError(e, "There was a problem with directory selection.");
        }
        directoryUpdated();
    }//GEN-LAST:event_chooseInputDirButtonActionPerformed

    private void previewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewButtonActionPerformed
        setVariables();
        int series = Integer.parseInt((String) seriesComboBox.getSelectedItem());
        int channel = Integer.parseInt((String) channelComboBox.getSelectedItem());
        try {
            img.loadPixelData(series, channel, channel + 1, null);
            ImagePlus imp = img.getLoadedImage();
            imp.show();
            IJ.log(String.format("Displaying \"%s\"", imp.getTitle()));
        } catch (Exception e) {
            GenUtils.logError(e, "An error occured while trying to display the image.");
        }
    }//GEN-LAST:event_previewButtonActionPerformed

    private void inputDirTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputDirTextFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() != KeyEvent.VK_ENTER) {
            return;
        }
        directoryUpdated();
    }//GEN-LAST:event_inputDirTextFieldKeyPressed

    private void fileNameComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_fileNameComboBoxPopupMenuWillBecomeInvisible
        if (!fileNameComboBox.isEnabled() || evt == null) {
            seriesComboBox.setEnabled(false);
            seriesSelectLabel.setEnabled(false);
        } else {
            String fileName = (String) fileNameComboBox.getSelectedItem();
            try {
                img.setId(String.format("%s%s%s", inputDirectory, File.separator, fileName));
                int series = img.getSeriesCount();
                ArrayList<String> seriesLabels = new ArrayList();
                for (int s = 0; s < series; s++) {
                    if (img.getSizeZ(s) > 1) {
                        seriesLabels.add(String.valueOf(s));
                    }
                }
                if(seriesLabels.size() < 1){
                    IJ.log(String.format("No valid image series found in %s\n", fileName));
                    return;
                }
                seriesComboBox.setModel(new DefaultComboBoxModel(seriesLabels.toArray()));
                seriesComboBox.setEnabled(true);
                seriesSelectLabel.setEnabled(true);
            } catch (Exception e) {
                GenUtils.error(String.format("Problem reading %s", fileName));
            }
        }
        seriesComboBoxPopupMenuWillBecomeInvisible(null);
    }//GEN-LAST:event_fileNameComboBoxPopupMenuWillBecomeInvisible

    private void seriesComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_seriesComboBoxPopupMenuWillBecomeInvisible
        if (!seriesComboBox.isEnabled()) {
            channelComboBox.setEnabled(false);
            channelSelectLabel.setEnabled(false);
        } else {
            String fileName = (String) fileNameComboBox.getSelectedItem();
            try {
                int channels = img.getSizeC(Integer.parseInt((String) seriesComboBox.getSelectedItem()));
                ArrayList<String> channelLabels = new ArrayList();
                for (int c = 0; c < channels; c++) {
                    channelLabels.add(String.valueOf(c));
                }
                channelComboBox.setModel(new DefaultComboBoxModel(channelLabels.toArray()));
                channelComboBox.setEnabled(true);
                channelSelectLabel.setEnabled(true);
            } catch (Exception e) {
                GenUtils.error(String.format("Problem reading %s", fileName));
            }
        }
        channelComboBoxPopupMenuWillBecomeInvisible(evt);
    }//GEN-LAST:event_seriesComboBoxPopupMenuWillBecomeInvisible

    private void channelComboBoxPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_channelComboBoxPopupMenuWillBecomeInvisible
        setVariables();
        previewButton.setEnabled(channelComboBox.isEnabled());
        if (previewButton.isEnabled())
            this.dispatchEvent(new ComponentEvent(channelComboBox, ComponentEvent.COMPONENT_SHOWN));
        else
            this.dispatchEvent(new ComponentEvent(channelComboBox, ComponentEvent.COMPONENT_HIDDEN));
    }//GEN-LAST:event_channelComboBoxPopupMenuWillBecomeInvisible

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        openHelpPage(GianiDefaultParams.HELP_ERROR_MESSAGE);
    }//GEN-LAST:event_helpButtonActionPerformed

    private void directoryUpdated() {
        inputDirectory = new File(inputDirTextField.getText());
        if (inputDirectory.exists() && inputDirectory.isDirectory()) {
            inputDirTextField.setForeground(Color.black);
        } else {
            inputDirTextField.setForeground(Color.red);
        }
        enableFileDropDown(listFiles());
    }

    public boolean setVariables() {
        try {
            setProperties(props, this);
            String fileName = (String) fileNameComboBox.getSelectedItem();
//            img.setId(String.format("%s%s%s", inputDirectory, File.separator, fileName));
//            props.setProperty(GianiDefaultParams.OUTPUT_DIR_LABEL, String.format("%s%s%s", inputDirectory.getAbsolutePath(), File.separator, GIANIUI.TITLE));
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    ArrayList<String> listFiles() {
        if (!inputDirectory.exists() || !inputDirectory.isDirectory()) {
            return null;
        }
        ArrayList<String> fileNames = BioFormatsFileLister.obtainValidFileList(inputDirectory);
        IJ.log(String.format("%s\n", inputDirectory.getAbsolutePath()));
        if (fileNames.size() > 0) {
            IJ.log(String.format("%d valid files found.\n", fileNames.size()));
            for (String file : fileNames) {
                IJ.log(String.format("%s\n", file));
            }
        } else {
            IJ.log("No valid files found.\n");
        }
        return fileNames;
    }

    void enableFileDropDown(ArrayList<String> fileNames) {
        boolean validFileNames = (fileNames != null) && (fileNames.size() > 0);
        fileNameComboBox.setEnabled(validFileNames);
        fileNameComboLabel.setEnabled(validFileNames);
        if (validFileNames) {
            fileNameComboBox.setModel(new DefaultComboBoxModel(fileNames.toArray()));
        }
        fileNameComboBoxPopupMenuWillBecomeInvisible(null);
    }

    public void setupProcess() {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> channelComboBox;
    private javax.swing.JLabel channelSelectLabel;
    private javax.swing.JButton chooseInputDirButton;
    private javax.swing.JComboBox<String> fileNameComboBox;
    private javax.swing.JLabel fileNameComboLabel;
    private javax.swing.JButton helpButton;
    private javax.swing.JLabel inputDirLabel;
    private javax.swing.JTextField inputDirTextField;
    private javax.swing.JButton previewButton;
    private javax.swing.JComboBox<String> seriesComboBox;
    private javax.swing.JLabel seriesSelectLabel;
    // End of variables declaration//GEN-END:variables
}
